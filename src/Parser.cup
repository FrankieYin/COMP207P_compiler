import java_cup.runtime.*;
import java.util.*;

parser code {:

	boolean syntaxErrors = false;

	public void syntax_error(Symbol current_token) {
    report_error(
			"Syntax error at line " + (current_token.left+1) + ", column "
			+ current_token.right+"\n", null
			);
		syntaxErrors = true;
  }

:}

/* terminals */
terminal INT, CHAR, FLOAT, RAT, BOOL;
terminal SEQ, SET, DICT;
terminal TOP, THREAD, FUNCTION, IDENTIFIER;
terminal IF, FI, THEN, ELSE, ELIF;
terminal WHILE, FORALL, DO, OD, BREAK, RETURN;
terminal TDEF, FDEF, PRINT, READ;
terminal MAIN, ALIAS, IN;
terminal WAIT, LEN;
terminal LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE, SEMI, DOT, COMMA;
terminal NOT, AND, OR, EQEQ, NOTEQ, COLON, CONS;
terminal PLUS, MINUS, MULT, DIV, EXP, UMINUS;
terminal EQ, ARROW;
terminal VBAR, DIFF, INTERSECTION;
terminal LT, LTEQ, GT, GTEQ;
terminal FLOAT_LITERAL, INTEGER_LITERAL, STRING_LITERAL, CHAR_LITERAL, BOOL_LITERAL, RAT_LITERAL;

/* non terminals */
non terminal goal, compilation_unit, main;
non terminal type_declarations_opt, type_declaration, type_aliasing;
non terminal thread_declaration, function_declaration, function_header;
non terminal data_type_declaration, formal_param_list, variable_declaration;
non terminal type_no_top, primitive_type, type, variable_type;
non terminal dict_type,set_type, seq_type;
non terminal dict_literal, dict_initialisers_opt, dict_initialiser;
non terminal seq_literal, set_literal;
non terminal expressions_opt, expressions, expression_opt, expression, statement_expression, assignment_expression;
non terminal literals;
non terminal operator, conditional_operator, numeric_operator, relational_operator, set_operator;
non terminal lambda_expression, lambda_header, argument_list;
non terminal block_only_statements, block_part_only_statements;
non terminal block, block_statement, main_block, statements, block_part, block_part_main, block_while, block_part_while, statement, expression_statement;
non terminal identifier, assignment, function_call;
non terminal if_statement, if_body, if_statement_in_while, if_body_in_while;
non terminal while_statement, forall_statement, forall_statement_in_while;
non terminal print_statement, return_statement, read_statement, break_statement;

/* precedence */
precedence nonassoc EQEQ, NOTEQ, LT, GT, LTEQ, GTEQ;
precedence left LBRACK;
precedence left COMMA;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left EXP;
precedence left UMINUS;
precedence left AND, OR;
precedence left NOT;
precedence left VBAR, INTERSECTION, DIFF;
precedence left IN;
precedence left CONS;
precedence left DOT;

/* grammar */
start with goal;

goal ::=
		compilation_unit
	;
compilation_unit ::=
		type_declarations_opt main
	;
main ::=
		MAIN LBRACE main_block RBRACE SEMI
	;

/* declarations*/
type_declarations_opt ::=
	| type_declarations_opt type_declaration
	;
type_declaration ::=
		variable_declaration
	| data_type_declaration
	| function_declaration
	| thread_declaration
	| type_aliasing
	;
thread_declaration ::=
		THREAD IDENTIFIER EQ LBRACE block RBRACE SEMI
	;
function_declaration ::=
		function_header LPAREN formal_param_list RPAREN LBRACE block RBRACE SEMI
	;
function_header ::=
		FDEF type_no_top identifier
	| FDEF identifier
	;
data_type_declaration ::=
		TDEF type_no_top LBRACE formal_param_list RBRACE SEMI
	;
formal_param_list ::=
	| formal_param_list COMMA formal_param_list
	| type_no_top identifier
	;
variable_declaration ::=
		variable_type identifier EQ expressions SEMI
	| variable_type identifier SEMI
	| dict_type  identifier EQ expressions SEMI
	| dict_type  identifier
	| seq_type identifier EQ expression SEMI
	| seq_type identifier SEMI
	| set_type identifier EQ expression SEMI
	| set_type identifier SEMI
	;
type_aliasing ::=
		ALIAS type_no_top identifier SEMI
	;

/* types */
type_no_top ::=
		primitive_type
	| dict_type
	| seq_type
	| set_type
	| identifier
	| FUNCTION
	| THREAD
	;
primitive_type ::=
		CHAR
	| BOOL
	| INT
	| RAT
	| FLOAT
	;
type ::=
		type_no_top
	| TOP
	;
variable_type ::=
		primitive_type
	| identifier
	| FUNCTION
	;
dict_type ::=
		DICT LT type COMMA type GT
	;
seq_type ::=
		SEQ LT type GT
	;
set_type ::=
		SET LT type_no_top GT
	;
dict_literal ::=
		LPAREN dict_initialisers_opt RPAREN
	;
dict_initialisers_opt ::=
	| dict_initialisers_opt COMMA dict_initialiser
	;
dict_initialiser ::=
		expression COLON expression
	;
seq_literal ::=
		LBRACK expressions_opt RBRACK
	;
set_literal ::=
		LBRACE expressions_opt RBRACE
	;

/* expressions */
expressions_opt ::=
	| expressions
	;
expressions ::=
		expression
	| expressions COMMA expression
	;
expression_opt ::=
	| expression
	;
expression ::=
		literals
	| dict_literal
	| seq_literal
	| set_literal
	| identifier
	| LPAREN expression RPAREN
	| expression operator expression
	| identifier LBRACK expression_opt COLON expression_opt RBRACK
	| function_call
	| identifier DOT LEN
	| MINUS expression %prec UMINUS
	| NOT expression
	| lambda_expression
	;
literals ::=
		STRING_LITERAL
	| CHAR_LITERAL
	| BOOL_LITERAL
	| INTEGER_LITERAL
	| RAT_LITERAL
	| FLOAT_LITERAL
	;
operator ::=
		conditional_operator
	| numeric_operator
	| relational_operator
	| set_operator
	| CONS
	;
conditional_operator ::=
		AND | OR
	;
numeric_operator ::=
		PLUS | MINUS
	| MULT | DIV
	| EXP
	;
relational_operator ::=
		LT | LTEQ | GT | GTEQ
	| EQEQ | NOTEQ
	| IN
	;
set_operator ::=
		VBAR | INTERSECTION | DIFF
	;
lambda_expression ::=
		lambda_header LBRACE statements RBRACE
	| lambda_header expression
	;
lambda_header ::=
		VBAR argument_list VBAR ARROW
	;
argument_list ::=
		IDENTIFIER
	| argument_list COMMA IDENTIFIER
	;

/* statements */
statements ::=
		statement
	| statements statement
	;
statement ::=
		if_statement
	| while_statement
	| forall_statement
	| print_statement
	| read_statement
	| return_statement
	| break_statement
	| expression_statement
	;
block ::=
	|	block block_statement
	;
main_block ::= // main block cannot be empty
		block_statement
	| main_block block_statement
	;
block_statement ::=
		statement
	| variable_declaration
	| type_aliasing
	| thread_declaration
	| function_declaration
	| data_type_declaration
	;


block_while ::=
		block_part_while
	| block_while block_part_while
	;
block_part_while ::=
		if_statement_in_while
	| forall_statement_in_while
	| while_statement
	| print_statement
	| return_statement
	| read_statement
	| expression_statement
	| variable_declaration
	| type_aliasing
	| thread_declaration
	| break_statement
	;


expression_statement ::=
		statement_expression SEMI
	;
statement_expression ::=
		assignment_expression
	| function_call
	;
assignment_expression ::=
		identifier EQ expressions
	;
identifier ::=
		IDENTIFIER
	| identifier DOT IDENTIFIER
	| identifier LBRACK expression RBRACK
	;
function_call ::=
		identifier LPAREN expressions_opt RPAREN
	|	LEN LPAREN identifier RPAREN
	| WAIT LPAREN IDENTIFIER RPAREN
	;
if_statement ::=
		IF LPAREN expression RPAREN THEN if_body FI
	;
if_body ::=
		block
	| block ELSE block
	| block ELIF LPAREN expression RPAREN THEN if_body
	;
if_statement_in_while ::=
		IF LPAREN expression RPAREN THEN if_body_in_while FI
	;

if_body_in_while ::=
		block_while
	| block_while ELSE block_while
	| block_while ELIF LPAREN expression RPAREN THEN if_body_in_while
	;

while_statement ::=
		WHILE LPAREN expression RPAREN DO block OD
	;
forall_statement ::=
		FORALL LPAREN IDENTIFIER IN expression RPAREN DO block OD
	;

forall_statement_in_while ::=
		FORALL LPAREN IDENTIFIER IN expression RPAREN DO block_while OD
	;

print_statement ::=
		PRINT expression_opt SEMI
	;
read_statement ::=
		READ identifier SEMI
	;
return_statement ::=
		RETURN expression_opt SEMI
	;
break_statement ::=
		BREAK expression_opt SEMI
	;













